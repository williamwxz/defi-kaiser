on:
  push:
    branches: [ master ]

env:
  AWS_ACCOUNT_ID : 598670062096
  AWS_REGION : us-west-2

# Permission can be added at job level or workflow level    
permissions:
      id-token: write   # This is required for requesting the JWT
      contents: read    # This is required for actions/checkout
jobs:
  AssumeRoleAndCallIdentity:
    runs-on: ubuntu-latest
    steps:
      - name: Git clone the repository
        uses: actions/checkout@v3
      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v1.7.0
        with:
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/GitHubAction-AssumeRoleWithAction
          role-session-name: GitHub_to_AWS_via_FederatedOIDC
          aws-region: ${{ env.AWS_REGION }}
      - name: use terraform
        uses: hashicorp/setup-terraform@v3
      - name: Change to Terraform directory
        run: cd infrastructure/terraform
      - name: Terraform fmt
        working-directory: infrastructure/terraform
        run: terraform fmt -check
      - name: Terraform Init
        working-directory: infrastructure/terraform
        run: terraform init
      - name: Terraform Validate
        working-directory: infrastructure/terraform
        run: terraform validate
      - name: Terraform Plan
        working-directory: infrastructure/terraform
        run: terraform plan -var-file=terraform.tfvars -var="account_id=${{ env.AWS_ACCOUNT_ID }}" -var="region=${{ env.AWS_REGION }}"
      - name: Terraform Apply
        working-directory: infrastructure/terraform
        run: terraform apply -var-file=terraform.tfvars -var="account_id=${{ env.AWS_ACCOUNT_ID }}" -var="region=${{ env.AWS_REGION }}" -auto-approve
      # - name: Login to Amazon ECR
      #   id: login-ecr
      #   uses: aws-actions/amazon-ecr-login@v2.0.1
      # - name: Build, tag, and push image to Amazon ECR
      #   id: build-image
      #   env:
      #     ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      #     IMAGE_TAG: ${{ github.sha }}
      #   run: |
      #     # Build a docker container and
      #     # push it to ECR so that it can
      #     # be deployed to ECS.
      #     docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
      #     docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
      #     echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
      # - name: Update kube config
      #   run: aws eks update-kubeconfig --name $EKS_CLUSTER_NAME --region $AWS_REGION
      # - name: Deploy to EKS
      #   env:
      #     ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }} 
      #     IMAGE_TAG: ${{ github.sha }} 
      #   run: |
      #     kubectl set image deployment/$ECR_REPOSITORY $ECR_REPOSITORY=${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY:$IMAGE_TAG